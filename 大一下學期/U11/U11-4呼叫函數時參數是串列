#11-4-1基本傳遞串列參數的應用
def product_msg(customers):
    str1="親愛的"
    str2="本公司將在2020年12月20日北京舉辦產品發表會"
    str3="總經理:深石敬上"
    for customer in customers:
        msg=str1+customer+"\n"+str2+"\n"+str3
        print(msg,'\n')
meembers=['Damon','Peter','Mary']
product_msg(meembers)

print(sep="")

#11-4-2觀察傳遞一般變數與串列變數到函數的區別
def mydata(n):
    print("副程式id(n)=:",id(n),"\t",n)
    n=5
    print("副程式id(n)=:",id(n),"\t",n)
x=1
print("主程式id(x)=:",id(x),"\t",x)
mydata(x)
print("主程式id(x)=:",id(x),"\t",x)
'''
從上述程式可以發現主程式在呼叫mydata()函數時傳遞了參數x，在mydata()函數中將變數設為n，當第四列變數內容更改為5時，這個變數在記憶體的地址也更改了，
所以函數mydata()執行結束時回到主程式，第十列可以得到原先主程式的變數x仍然是1。
如果主程式呼叫函數所傳遞的是串列變數，其實是將此串列變數的位址參照傳給函數，如果在函數中此串列變數位址參照的內容更改時，原先主程式變數內容會隨著改變。
'''
print(sep="")

def mydata(n):
    print(f"副程式id(n)=:{id(n)}\t{n}")
    n[0]=5
    print(f"副程式id(n)=:{id(n)}\t{n}")
x=[1,2]
print("主程式id(x)=:",id(x),"\t",x)
mydata(x)
print("主程式id(x)=:",id(x),"\t",x)
'''
從上述執行結果可以得到，串列變數的位址不論是在主程式或是函數皆保持一致，所以第四列函數mydata()內串列內容改變時，函數執行結束回到主程式可以看到主程式串列內容也更改了。
'''
print(sep="")

#11-4-3在函數內修改串列的內容
def kitchen(unserved,served):
    '''將未服務的餐點轉為已經服務'''
    print("廚房處理顧客所點的餐點")
    while unserved:
        current_meal=unserved.pop()
        '''模擬出餐點過程'''
        print("菜單:",current_meal)
        '''將已出餐點轉入已經服務串列'''
        served.append(current_meal)
def show_unserved_meal(unserved):
    '''顯示尚未服務的餐點'''
    print("===下列是尚未服務的餐點===")
    if not unserved:
        print("***沒有餐點***","\n")
        for unserved_meal in unserved:
            print(unserved_meal)
def show_served_meal(served):
    '''顯示已經服務的餐點'''
    print("===下列是已經服務的餐點===")
    if not served:
        print("***沒有餐點***","\n")
    for served_meal in served:
        print(served_meal)
unserved=['大麥克','勁辣雞腿堡','麥克雞塊']#所點餐點
served=[]                               #已服務餐點
'''列出餐廳處理前的餐點內容'''
show_unserved_meal(unserved)            #列出未服務餐點
show_served_meal(served)                #列出已服務餐點
'''餐廳服務過程'''
kitchen(unserved,served)                #餐廳處理過程
print("\n",'===廚房處理結束===',"\n")
'''列出餐廳處理後的餐點內容'''
show_unserved_meal(unserved)            #列出未服務餐點
show_served_meal(served)                #列出已服務餐點

print(sep="")

order_list=['大麥克','勁辣雞腿堡','麥克雞塊']#所點餐點
served_list=[]                             #已服務餐點
'''列出餐廳處理前的餐點內容'''
show_unserved_meal(order_list)             #列出未服務餐點
show_served_meal(served_list)              #列出已服務餐點
'''餐廳服務過程'''
kitchen(order_list,served_list)            #餐廳處理過程
print("\n",'===廚房處理結束===',"\n")
'''列出餐廳處理後的餐點內容'''
show_unserved_meal(order_list)             #列出未服務餐點
show_served_meal(served_list)              #列出已服務餐點

print(sep="")

#11-4-4使用副本傳遞串列
def kitchen(unserved,served):
    '''將未服務的餐點轉為已經服務'''
    print("廚房處理顧客所點的餐點")
    while unserved:
        current_meal=unserved.pop()
        '''模擬出餐點過程'''
        print("菜單:",current_meal)
        '''將已出餐點轉入已經服務串列'''
        served.append(current_meal)
def show_unserved_meal(unserved):
    '''顯示尚未服務的餐點'''
    print("===下列是尚未服務的餐點===")
    if not unserved:
        print("***沒有餐點***","\n")
        for unserved_meal in unserved:
            print(unserved_meal)
def show_served_meal(served):
    '''顯示已經服務的餐點'''
    print("===下列是已經服務的餐點===")
    if not served:
        print("***沒有餐點***","\n")
    for served_meal in served:
        print(served_meal)
order_list=['大麥克','勁辣雞腿堡','麥克雞塊']#所點餐點
served_list=[]                             #已服務餐點
'''列出餐廳處理前的餐點內容'''
show_unserved_meal(order_list)             #列出未服務餐點
show_served_meal(served_list)              #列出已服務餐點
'''餐廳服務過程'''
kitchen(order_list[:],served_list)            #餐廳處理過程
print("\n",'===廚房處理結束===',"\n")
'''列出餐廳處理後的餐點內容'''
show_unserved_meal(order_list)             #列出未服務餐點
show_served_meal(served_list)              #列出已服務餐點
'''
由上述執行結果發現，原先儲存點餐的order_list串列經過kitchen()函數後，此串列的內容沒有改變
'''