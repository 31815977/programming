#程式碼結構
'''
class BaseClassName():                  #先定義基底類別
    Base Class的內容
class DerivedClassName(BaseClassName):  #再定義延伸類別
    Derived Class的內容
'''
#12-3-1衍生類別繼承基底類別的實例應用
class Father():
    def hometown(self):
        print("我住在台北")
class Son(Father):
    pass
hung=Father()
ivan=Son()
hung.hometown()
ivan.hometown()

print(sep="")


class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方式
        self.__name=uname               #設定私有存款者名字
        self.__balance=0                #設定私有開戶金額是0
        self.__bankname="Taipei Bank"     #設定私有銀行名稱
        self.__rate=30                  #預設美金與台幣換匯比例
        self.__service_charge=0.01      #換匯的服務費
    def save_money(self,money):         #設計存款方法
        self.__balance+=money           #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.__balance-=money           #執行提款
        print("提款",money,"完成")      #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.__name.title(),"目前餘額:",self.__balance)
    def usa_to_taiwan(self,usa_d):      #美金兌換台幣方式
        self.result=self.__cal_rate(usa_d)
        return self.result
    def __cal_rate(self,usa_d):         #計算換匯這是私有方式
        return int(usa_d*self.__rate*(1-self.__service_charge))
class Shilin_Banks(Banks):
    #定義士林分行
    pass
hungbank=Shilin_Banks('hung')#定義物件hungbank
hungbank.save_money(500)
hungbank.get_balance()

print(sep="")

#12-3-2如何取得基底類別的私有屬性
class Father():
    def __init__(self):
        self.__address="台北市羅斯福路"
    def getaddr(self):
        return self.__address
class Son(Father):
    pass
hung=Father()
ivan=Son()
print("父類別:",hung.getaddr())
print("子類別:",ivan.getaddr())

print(sep="")

class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方式
        self.__name=uname               #設定私有存款者名字
        self.__balance=0                #設定私有開戶金額是0
        self.__bankname="Taipei Bank"     #設定私有銀行名稱
        self.__rate=30                  #預設美金與台幣換匯比例
        self.__service_charge=0.01      #換匯的服務費
    def save_money(self,money):         #設計存款方法
        self.__balance+=money           #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.__balance-=money           #執行提款
        print("提款",money,"完成")      #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.__name.title(),"目前餘額:",self.__balance)
    def usa_to_taiwan(self,usa_d):      #美金兌換台幣方式
        self.result=self.__cal_rate(usa_d)
        return self.result
    def __cal_rate(self,usa_d):         #計算換匯這是私有方式
        return int(usa_d*self.__rate*(1-self.__service_charge))
    def bank_title(self):               #獲得銀行名稱
        return self.__bankname
class Shilin_Banks(Banks):
    #定義士林分行
    pass
hungbank=Shilin_Banks("hung")           #定義物件hungbank
print("我的存款銀行是:",hungbank.bank_title())

print(sep="")


#12-3-3衍生類別與基底類別有相同名稱的屬性
class Person():
    def __init__(self,name):
        self.name=name
class LawerPerson(Person):
    def __init__(self, name):
        self.name=name+"律師"
hung=Person("洪錦魁")
lawer=LawerPerson("洪錦魁")
print(hung.name)
print(lawer.name)

print(sep="")

class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方式
        self.__name=uname               #設定私有存款者名字
        self.__balance=0                #設定私有開戶金額是0
        self.bankname="Taipei Bank"     #設定私有銀行名稱
        self.__rate=30                  #預設美金與台幣換匯比例
        self.__service_charge=0.01      #換匯的服務費
    def save_money(self,money):         #設計存款方法
        self.__balance+=money           #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.__balance-=money           #執行提款
        print("提款",money,"完成")      #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.__name.title(),"目前餘額:",self.__balance)
    def usa_to_taiwan(self,usa_d):      #美金兌換台幣方式
        self.result=self.__cal_rate(usa_d)
        return self.result
    def __cal_rate(self,usa_d):         #計算換匯這是私有方式
        return int(usa_d*self.__rate*(1-self.__service_charge))
    def bank_title(self):               #獲得銀行名稱
        return self.__bankname
class Shilin_Banks(Banks):
    #定義士林分行
    def __init__(self, uname):
        self.bankname="Taipei Bank-Shilin Branch"#定義分行名稱
jamesbank=Banks('James')
print("James's banks=",jamesbank.bankname)        
hungbank=Shilin_Banks("hung")           #定義物件hungbank
print("Hung's banks=",hungbank.bankname)

print(sep="")

#12-3-4衍生類別與基底類別有相同名稱的方法
class Person():
    def job(self):
        print("我是老師")
class LawerPerson(Person):
    def job(self):
        print("我是律師")
hung=Person()
ivan=LawerPerson()
hung.job()
ivan.job()

print(sep="")

class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方式
        self.__name=uname               #設定私有存款者名字
        self.__balance=0                #設定私有開戶金額是0
        self.__bankname="Taipei Bank"     #設定私有銀行名稱
        self.__rate=30                  #預設美金與台幣換匯比例
        self.__service_charge=0.01      #換匯的服務費
    def save_money(self,money):         #設計存款方法
        self.__balance+=money           #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.__balance-=money           #執行提款
        print("提款",money,"完成")      #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.__name.title(),"目前餘額:",self.__balance)
    def usa_to_taiwan(self,usa_d):      #美金兌換台幣方式
        self.result=self.__cal_rate(usa_d)
        return self.result
    def __cal_rate(self,usa_d):         #計算換匯這是私有方式
        return int(usa_d*self.__rate*(1-self.__service_charge))
    def bank_title(self):               #獲得銀行名稱
        return self.__bankname
class Shilin_Banks(Banks):
    #定義士林分行
    def __init__(self, uname):
        self.bankname="Taipei Bank-Shilin Branch"#定義分行名稱
    def bank_title(self):
        return self.bankname
jamesbank=Banks('James')
print("James's banks=",jamesbank.bank_title())        
hungbank=Shilin_Banks("hung")           #定義物件hungbank
print("Hung's banks=",hungbank.bank_title())

print(sep="")

#12-3-5衍生類別引用基底類別的方法
class Animals():
    """Animals類別，這是基底類別"""
    def __init__(self,animal_name,animal_age):
        self.name=animal_name   #紀錄動物名稱
        self.age=animal_age     #記錄動物年齡
    def run(self):              #輸出動物is running
        print(self.name.title(),"is running")
class Dogs(Animals):
    """Dogs類別,這是Animal的衍生類別"""
    def __init__(self,dog_name,dog_age):
        super().__init__("my pet"+dog_name.title(),dog_age)
mycat=Animals("lucy",5)         #建立Animals物件以及測試
print(mycat.name.title(),"is",mycat.age,"years old.")
mycat.run()
mydog=Dogs("lily",6)            #建立Dogs物件以及測試
print(mydog.name.title(),"is",mydog.age,"years old.")
mydog.run()

print(sep="")

#12-3-6衍生類別有自己的想法
class Animals():
    """Animals類別，這是基底類別"""
    def __init__(self,animal_name,animal_age):
        self.name=animal_name   #紀錄動物名稱
        self.age=animal_age     #記錄動物年齡
    def run(self):              #輸出動物is running
        print(self.name.title(),"is running")
class Dogs(Animals):
    """Dogs類別,這是Animal的衍生類別"""
    def __init__(self,dog_name,dog_age):
        super().__init__("my pet"+dog_name.title(),dog_age)
    def sleeping(self):
        print("My pet","is sleeping")
mycat=Animals("lucy",5)         #建立Animals物件以及測試
print(mycat.name.title(),"is",mycat.age,"years old.")
mycat.run()
mydog=Dogs("lily",6)            #建立Dogs物件以及測試
print(mydog.name.title(),"is",mydog.age,"years old.")
mydog.run()
mydog.sleeping()

print(sep="")

#12-3-7三代同堂的類別與取得基底類別的屬性super()
#super().__init__:將父類別的屬性複製
class Grandfather():
    """定義祖父的資產"""
    def __init__(self):
        self.grandfathermoney=10000
    def get_info1(self):
        print("Grandfather's information")
class Father(Grandfather):              #父類別是Grandfather
    """定義父親的資產"""
    def __init__(self):
        self.fathermoney=8000
        super().__init__()
    def get_info2(self):                #父類別是Father
        print("Father's information")
class Ivan(Father):
    """定義Ivan的資產"""
    def __init__(self):
        self.ivanmoney=3000
        super().__init__()
    def get_info3(self):
        print("Ivan's information")
    def get_money(self):                #取得資產明細
        print("\nIvan資產:",self.ivanmoney,
              "\n父親資產:",self.fathermoney,
              "\n祖父資產",self.grandfathermoney)
ivan=Ivan()
ivan.get_info3()                        #從Ivan中獲得
ivan.get_info2()                        #流程Ivan->Father
ivan.get_info1()                        #流程Ivan->Father->Grandfather
ivan.get_money()                        #取得資產明細

print(sep="")

#12-3-8兄弟類別屬性的取得
class Father():
    """定義父親的資產"""
    def __init__(self):
        self.fathermoney=10000
class Ira(Father):                      #父類別是Father
    """定義Ira的資產"""
    def __init__(self):
        self.iramoney=8000
        super().__init__()
class Ivan(Father):                     #父類別是Father
    """定義Ivan的資產"""
    def __init__(self):
        self.ivanmoney=3000
        super().__init__()
    def get_money(self):                #取得資產明細
        print("Ivan資產:",self.ivanmoney,
              "\n父親資產:",self.fathermoney,
              "\nIra資產",Ira().iramoney)#注意寫法
ivan=Ivan()
ivan.get_money()                        #取得資產明細

print(sep="")

#12-3-9認識Python類別方法的self參數
class Person():
    def interest(self):
        print("Smiling is my interest")
hung=Person()
hung.interest()