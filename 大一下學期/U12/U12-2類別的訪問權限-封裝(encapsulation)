#12-2-1私有屬性
class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方法
        self.name=uname                 #設定存款者名字
        self.balance=0                  #設定開戶金額是0
        self.bankname="Taipei Bank"     #設定銀行名稱
    def save_money(self,money):         #設計存款方法
        self.balance+=money             #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.balance-=money             #執行提款
        print("提款",money,"完成")       #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.name.title(),"目前餘額:",self.balance)
hungbank=Banks('hung')                  #定義物件hungbank
hungbank.get_balance()
hungbank.balance=10000                  #類別外直接竄改存款餘額
hungbank.get_balance()

print(sep="")

#私有屬性 應用方式:屬性名稱前面增加__(2個底線)，宣告為私有屬性時，類別外的程式就無法引用了
class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方法
        self.__name=uname               #設定存款者名字
        self.__balance=0                #設定開戶金額是0
        self.__bankname="Taipei Bank"   #設定銀行名稱
    def save_money(self,money):         #設計存款方法
        self.__balance+=money           #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.__balance-=money           #執行提款
        print("提款",money,"完成")      #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.__name.title(),"目前餘額:",self.__balance)
hungbank=Banks('hung')                  #定義物件hungbank
hungbank.get_balance()
hungbank.__balance=10000                #類別外直接竄改存款餘額
hungbank.get_balance()

print(sep="")

#破解私有屬性
hungbank._Banks_balance=12000
print(hungbank.get_balance())

#U12-2-2私有方法
class Banks():
    '''定義銀行類別'''
    def __init__(self,uname):           #初始化方式
        self.__name=uname               #設定私有存款者名字
        self.__balance=0                #設定私有開戶金額是0
        self.bankname="Taipei Bank"     #設定私有銀行名稱
        self.__rate=30                  #預設美金與台幣換匯比例
        self.__service_charge=0.01      #換匯的服務費
    def save_money(self,money):         #設計存款方法
        self.__balance+=money           #執行存款
        print("存款",money,"完成")      #列印存款完成
    def withdraw_money(self,money):     #設計提款方法
        self.__balance-=money           #執行提款
        print("提款",money,"完成")      #列印提款完成
    def get_balance(self):              #獲得存款餘額
        print(self.__name.title(),"目前餘額:",self.__balance)
    def usa_to_taiwan(self,usa_d):      #美金兌換台幣方式
        self.result=self.__cal_rate(usa_d)
        return self.result
    def __cal_rate(self,usa_d):         #計算換匯這是私有方式
        return int(usa_d*self.__rate*(1-self.__service_charge))
hungbank=Banks('hung')                  #定義物件hungbank
usdallor=50
print(usdallor,"美金可以兌換",hungbank.usa_to_taiwan(usdallor),"台幣")

print(sep="")

#破解私有方法
print(hungbank._Banks__cal_rate(50))