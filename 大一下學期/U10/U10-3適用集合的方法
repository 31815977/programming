#10-3-1 add() 語法:集合名稱.add(新增元素)
#集合是無序，所以可能會獲得不同的排列結果
A={"Taipei","Beijing","Tokyo"}
A.add("Chicago")
print("A集合內容:",A)
A.add("Beijing")
print("A集合內容:",A)
tup=(1,2,3)
A.add(tup)
print("A集合內容:",A)

print(sep="")

#10-3-2 copy() 語法:新集合名稱=舊集合名稱.copy()
#賦值
a={1,2,3}
b=a                     #兩者相同
b.add(10)
print("賦值->觀察a:",a)
print("賦值->觀察b:",b)

#淺拷貝shallow copy
a={1,2,3}
b=a.copy()              #兩者不同
b.add(100)
print("拷貝->觀察a:",a)
print("拷貝->觀察b:",b)

print(sep="")

#10-3-3 remove() 語法:集合名稱.remove(欲刪除元素)
#如果指定刪除的元素存在集合內，remove()可以刪除元素，反之不存在，會出現錯誤
countries={"Japan","China","France"}
print("刪除前的countries集合:",countries)
countries.remove("Japan")
print("刪除後的countries集合:",countries)
'''
#會錯誤的範例
countries.remove("Japan")
print("刪除後的countries集合:",countries)
'''
print(sep="")

#10-3-4 discard() 語法:ret_value(正確的值?).discard(欲刪除的元素)
animals={"dog","cat","bird"}
print("刪除前的animals集合:",animals)
animals.discard("cat")                                  #刪除在集合的元素
print("刪除後的animals集合:",animals)
animals.discard("pig")                                  #刪除不在集合的元素
print("刪除後的animals集合:",animals)
print("刪除資料存在的回傳值:",animals.discard("cat"))   #列印回傳值
print("刪除資料不存在的回傳值:",animals.discard("pig"))

print(sep="")

#10-3-5 pop() 語法:ret_element(正確的元素?)=集合名稱.pop()
#pop是用隨機方式刪除集合元素，所刪除的元素會被傳回，如果集合是空集合會產生錯誤
animals={"dog","cat","bird"}
print("刪除前的animals集合:",animals)
x=animals.pop()
print("刪除後的animals集合:",animals)
print("所刪除的資料:",x)

print(sep="")

#10-3-6 clear() 語法:集合.clear()
A={"Mississippi","Idaho","Florida"}
print("刪除前的集合:",A)
A.clear()
print("刪除後的集合:",A)

print(sep="")

#10-3-7 共同元素isdisjoint() 語法:ret_boolean=集合A.isdisjoint(集合B)
A={"a","b","c"}
B={"c","d","e"}
C={"f","g","h"}
boolean=A.isdisjoint(B)
print("有共同元素:",boolean)
boolean=A.isdisjoint(C)
print("沒有共同元素:",boolean)

print(sep="")

#10-3-8子集合issubet() 語法:布林值=子集合名稱.issubset(集合名稱)
A={"a","b","c"}
B={"a","b","c","d","e"}
C={"e","f","g"}
boolean=A.issubset(B)
print("A是B的子集合:",boolean)
boolean=A.issubset(C)
print("C是B的子集合:",boolean)

print(sep="")

#10-3-9父集合issuperset() 語法:布林值=父集合名稱.issuperset(集合名稱)
#10-3-10傳回集合的交集intersection_update() 語法:ret_value=A.intersection_update(*B) *B在這代表多個集合
#10-3-11 使用聯集更新集合內容update() 語法:集合名稱.update(集合名稱)
car1={"Audi","Ford","Toyota"}
car2={"Nissan","Toyota"}
print("執行update()前列出car1和car2內容")
print("car1=",car1)
print("car2=",car2)
car1.update(car2)                       #將car2加到car1內
print("執行update()後列出car1和car2內容")
print("car1=",car1)
print("car2=",car2)

print(sep="")

#10-3-12 difference_update() 語法:集合A.difference_update(集合B)
#將集合A和集合B內重複的元素刪除，結果存在A集合
#10-3-13 symmetric_difference_update() 語法:集合A.symmetric_difference_update(集合B)
#與10-2-4的對稱差集觀念一樣，但是只更改呼叫此方法的集合