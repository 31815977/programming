# ch14_18.py
<<<<<<< HEAD
fn = 'out14_18.txt'
string = 'I love Python.'

with open(fn, 'w', encoding='utf-8') as fObj:#'w':覆寫
    print(fObj.write(string))

print("(1)-----------------------------------")
'''
# ch14_19.py
fn = 'out14_19.txt'
x = 100

with open(fn, 'w') as file_Obj:#'w':覆寫
    file_Obj.write(x)       # 直接寫入數值x產生錯誤

print("(2)-----------------------------------")
'''
# 例外1.py
fn = '例外1.txt'
x = 100

with open(fn, 'w') as file_Obj:#'w':覆寫
    file_Obj.write(str(x))      # 使用str(x)輸出

print("(3)-----------------------------------")

# ch14_20.py
fn = 'out14_20.txt'
str1 = 'I love Python.'
str2 = 'Learn Python from the best book'

with open(fn, 'w', encoding='utf-8') as fObj:#'w':覆寫
    fObj.write(str1)
    fObj.write(str2)

print("(4)-----------------------------------")
=======
fn = 'data14_18.txt'            # 設定欲開啟的檔案
chunk = 100
msg = ''
with open(fn, 'r', encoding='utf-8') as fObj: 
    while True:
        txt = fObj.read(chunk)  # 一次讀取chunk數量
        if not txt:
            break
        msg += txt
print(msg)

print(sep="")

# ch14_19.py
fn = 'out14_19.txt'
string = 'I love Python.'

with open(fn, 'w', encoding='cp950') as fObj:
    print(fObj.write(string))

print(sep="")

# ch14_20.py
fn = 'out14_20.txt'
x = 100

with open(fn, 'w') as file_Obj:
    file_Obj.write(x)       # 直接寫入數值x產生錯誤

print(sep="")

# ch14_20_1.py
fn = 'out14_20_1.txt'
x = 100

with open(fn, 'w') as file_Obj:
    file_Obj.write(str(x))      # 使用str(x)輸出

print(sep="")
>>>>>>> 3e57cd079d2cc5b2cb28fd8f4a3f5ba1db9cf18e

# ch14_21.py
fn = 'out14_21.txt'
str1 = 'I love Python.'
<<<<<<< HEAD
str2 = 'Learn Python from the best book.'

with open(fn, 'w') as file_Obj:#'w':覆寫
    file_Obj.write(str1 + '\n')
    file_Obj.write(str2 + '\n')

print("(5)-----------------------------------")

# ch14_22.py
fn = 'out14_22.txt'
str1 = 'I love Python.'
str2 = 'Learn Python from the best book.'

with open(fn, 'a') as file_Obj:#'a':附加
    file_Obj.write(str1 + '\n')
    file_Obj.write(str2 + '\n')

print("(6)-----------------------------------")

# ch14_23.py
=======
str2 = '洪錦魁著'

with open(fn, 'w', encoding='cp950') as fObj:
    fObj.write(str1)
    fObj.write(str2)

print(sep="")

# ch14_21_1.py
fn = 'out14_21_1.txt'
str1 = 'I love Python.'
str2 = 'Learn Python from the best book.'

with open(fn, 'a') as file_Obj:
    file_Obj.write(str1 + '\n')
    file_Obj.write(str2 + '\n')

print(sep="")

# ch14_22.py
>>>>>>> 3e57cd079d2cc5b2cb28fd8f4a3f5ba1db9cf18e
zenofPython = '''Beautiful is better than ugly.
Explicit is better than implicits.
Simple is better than complex.
Flat is better than nested.
Sparse is better than desse.
Readability counts.
Special cases aren't special enough to break the rules.
...
...
By Tim Peters'''

<<<<<<< HEAD
fn = 'out14_23.txt'
size = len(zenofPython)
offset = 0
chunk = 100                         # 每次寫入的單位
with open(fn, 'w', encoding='utf-8') as fObj:#'w':覆寫
=======
fn = 'out14_22.txt'
size = len(zenofPython)
offset = 0
chunk = 100                         # 每次寫入的單位
with open(fn, 'w', encoding='cp950') as fObj:
>>>>>>> 3e57cd079d2cc5b2cb28fd8f4a3f5ba1db9cf18e
    while True:
        if offset > size:
            break
        print(fObj.write(zenofPython[offset:offset+chunk]))
        offset += chunk

<<<<<<< HEAD
print("(7)-----------------------------------")

# 例外2.py
fn = '例外2.txt'
mystr = ['相見時難別亦難\n', '東風無力百花殘\n', '春蠶到死絲方盡']

with open(fn, 'w', encoding='utf-8') as fObj:#'w':覆寫
=======
print(sep="")

# ch14_23.py
fn = 'out14_23.txt'
mystr = ['相見時難別亦難\n', '東風無力百花殘\n', '春蠶到死絲方盡']

with open(fn, 'w', encoding='cp950') as fObj:
>>>>>>> 3e57cd079d2cc5b2cb28fd8f4a3f5ba1db9cf18e
    fObj.writelines(mystr)

print(sep="")
